generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(uuid())
  name                String
  email               String      @unique
  password            String // Hashed and salted password
  posts               Post[]
  comments            Comment[]
  savedPosts          SavedPost[]
  profile             Profile?
  failedLoginAttempts Int         @default(0)
  lastFailedLogin     DateTime?
  loginCount          Int         @default(0)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Profile {
  id        String   @id @default(uuid())
  username  String   @unique
  bgColor   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bio       String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String      @id @default(uuid())
  title       String
  content     Json?
  published   Boolean     @default(false)
  publishedAt DateTime    @default(now())
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]  @relation("PostToCategory")
  tags        Tag[]       @relation("PostToTag")
  comments    Comment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  savedPost   SavedPost[]
  image       String?
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  posts     Post[]   @relation("PostToTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  posts     Post[]   @relation("PostToCategory")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now())
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  parentComment   Comment?  @relation("ReplyToComment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String
  replies         Comment[] @relation("ReplyToComment")
}

model SavedPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}
